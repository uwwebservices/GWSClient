pool:
    name: 'ECS Build Agents'

steps:
  # Generate our unique version number and use that for the BuildNumber so we make use of it in release pipelines
  - bash: |
      myVersion=1.0.`date +%y%j.%H%M`   
      echo "##vso[build.updatebuildnumber]$myVersion"
    displayName: Set build number for GWSClient
 
  # Auto-increment the version number; specific to this project
  - bash: "setversion $(Build.BuildNumber) GWSClient/GWSClient.csproj"
    displayName: Run setversion on GWSClient
    workingDirectory: $(Build.SourcesDirectory)
      
  # Clear nuget package cache
  - task: DotNetCoreCLI@2
    displayName: Clear nuget package cache
    inputs:
      command: custom
      custom: nuget locals all --clear

  # Delete any previous nuget packages so they don't get copied to artifacts directory again
  - task: DeleteFiles@1
    displayName: Delete previous nuget packages from SourcesDirectory
    inputs:
      sourceFolder: $(Build.SourcesDirectory)
      contents: '**/*.nupkg'
      
  # Build Solution
  - task: DotNetCoreCLI@2
    displayName: Build Solution
    inputs:      
      command: build
      arguments: GWSClient.sln --configuration Release

  # Run unit tests
  - task: DotNetCoreCLI@2
    displayName: Run unit tests
    inputs:      
      command: test
      projects: '**/*Test.csproj'
      arguments: --filter TestCategory=UnitTest --logger "console;verbosity=diagnostic" --blame --no-build --configuration Release

  # Delete any previous nuget packages so they don't get pushed again
  - task: DeleteFiles@1
    displayName: Delete previous nuget packages
    inputs:
      sourceFolder: $(Build.ArtifactStagingDirectory)
      contents: '**/*.nupkg'

  # Copy the nuget package that was created in the PostBuild event
  - task: CopyFiles@2
    displayName: Copy nuget packages to artifacts folder
    inputs:
      SourceFolder: $(Build.SourcesDirectory)
      Contents: '**/*.nupkg'
      TargetFolder: $(Build.ArtifactStagingDirectory)
      flattenFolders: true

  # Push nuget package
  - task: DotNetCoreCLI@2
    displayName: Push to Nuget
    inputs:
      command: push
      packagesToPush: $(Build.ArtifactStagingDirectory)/**/*.nupkg
      publishFeedCredentials: 'Nuget.org (uwwebservices organization)'
    condition: eq(variables['Build.SourceBranchName'], 'master')
  
  # Delete nuget packages so they don't get included in web deployment packages that get created in the same artifactStagingDirectory
  - task: DeleteFiles@1
    displayName: Delete nuget packages we just pushed
    inputs:
      sourceFolder: $(Build.ArtifactStagingDirectory)
      contents: '**/*.nupkg'